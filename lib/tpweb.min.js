!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("tpweb",[],t):"object"==typeof exports?exports.tpweb=t():e.tpweb=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}var t,n,r;return t=e,(n=[{key:"encode",value:function(e){var t,n,o,r,u,c,i,a="",f=0;for(e=this._utf8Encode(e);f<e.length;)r=(t=e.charCodeAt(f++))>>2,u=(3&t)<<4|(n=e.charCodeAt(f++))>>4,c=(15&n)<<2|(o=e.charCodeAt(f++))>>6,i=63&o,isNaN(n)?c=i=64:isNaN(o)&&(i=64),a=a+this._keyStr.charAt(r)+this._keyStr.charAt(u)+this._keyStr.charAt(c)+this._keyStr.charAt(i);return a}},{key:"decode",value:function(e){var t,n,o,r,u,c,i="",a=0;for(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");a<e.length;)t=this._keyStr.indexOf(e.charAt(a++))<<2|(r=this._keyStr.indexOf(e.charAt(a++)))>>4,n=(15&r)<<4|(u=this._keyStr.indexOf(e.charAt(a++)))>>2,o=(3&u)<<6|(c=this._keyStr.indexOf(e.charAt(a++))),i+=String.fromCharCode(t),64!==u&&(i+=String.fromCharCode(n)),64!==c&&(i+=String.fromCharCode(o));return i=this._utf8Decode(i)}},{key:"_utf8Encode",value:function(e){var t="";e=e.replace(/\r\n/g,"\n");for(var n=0;n<e.length;n++){var o=e.charCodeAt(n);o<128?t+=String.fromCharCode(o):o>127&&o<2048?(t+=String.fromCharCode(o>>6|192),t+=String.fromCharCode(63&o|128)):(t+=String.fromCharCode(o>>12|224),t+=String.fromCharCode(o>>6&63|128),t+=String.fromCharCode(63&o|128))}return t}},{key:"_utf8Decode",value:function(e){for(var t="",n=0,o=0,r=0,u=0;n<e.length;)(o=e.charCodeAt(n))<128?(t+=String.fromCharCode(o),n++):o>191&&o<224?(r=e.charCodeAt(n+1),t+=String.fromCharCode((31&o)<<6|63&r),n+=2):(r=e.charCodeAt(n+1),u=e.charCodeAt(n+2),t+=String.fromCharCode((15&o)<<12|(63&r)<<6|63&u),n+=3);return t}}])&&o(t.prototype,n),r&&o(t,r),e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"TpSocket",{enumerable:!0,get:function(){return r.default}});var o,r=(o=n(2))&&o.__esModule?o:{default:o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=u(n(0)),r=u(n(3));function u(e){return e&&e.__esModule?e:{default:e}}function c(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name="Barra-Tempest"}var t,n,u;return t=e,(n=[{key:"name",get:function(){return this._name}},{key:"encodedName",get:function(){return(new o.default).encode(this._name)}},{key:"saluta",get:function(){return r.default.greetme()}}])&&c(t.prototype,n),u&&c(t,u),e}();t.default=i,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e={},t=null,n="base64",o=[],c=0,i=1e4,a=[],f={message:function(){},open:function(){},close:function(){},error:function(){}},l=!1;function s(){return"ciccamelo! uno a zero!"}function d(){return a}function p(){return o}function y(){return c}function b(e){c=e}function h(){return o.length-c}function g(){return o[c]}function m(){return o[c++]}function v(e){0===c?o.unshift(e):o[c-=1]=e}function S(){return(o[c++]<<8)+o[c++]}function _(){return(o[c++]<<24)+(o[c++]<<16)+(o[c++]<<8)+o[c++]}function k(e){void 0===e&&(e=h());var t=o.slice(c,c+e);return c+=e,String.fromCharCode.apply(null,t)}function C(e){return void 0===e&&(e=h()),c+=e,o.slice(c-e,c)}function A(e,t){return t?o.slice(c+e,c+t):o.slice(c+e)}function w(e,t,n){var r=o.length-c;if(r<t){if(n){if(c<n)throw new Error("rQwait cannot backup "+n+" bytes");c-=n}return!0}return!1}function x(){return 0!==t.bufferedAmount&&console.log("bufferedAmount: "+t.bufferedAmount),t.bufferedAmount<e.maxBufferedAmount?(a.length>0&&(t.send(function(){if("binary"===n)return new Uint8Array(a).buffer;return r.default.encode(a)}()),a=[]),!0):(console.log("Delaying send, bufferedAmount: "+t.bufferedAmount),!1)}function O(e){return a=a.concat(e),x()}function j(t){e.send(t.split("").map(function(e){return e.charCodeAt(0)}))}function W(e){try{!function(e){if("binary"===n)for(var t=new Uint8Array(e),u=0;u<t.length;u++)o.push(t[u]);else o=o.concat(r.default.decode(e,0))}(e.data),h()>0?(f.message(),o.length>i&&(o=o.slice(c),c=0)):console.log("Ignoring empty message")}catch(e){void 0!==e.stack?console.warn("recv_message, caught exception: "+e.stack):void 0!==e.description?console.warn("recv_message, caught exception: "+e.description):console.warn("recv_message, caught exception:"+e),void 0!==e.name?f.error(e.name+": "+e.message):f.error(e)}}function Q(e,t){f[e]=t}function P(e,n){var r=!1,i=!1;o=[],c=0,a=[],t=null,"Uint8Array"in window&&"set"in Uint8Array.prototype&&(r=!0);try{r&&("binaryType"in WebSocket.prototype||new WebSocket(n+"://.").binaryType)&&(console.log("Detected binaryType support in WebSockets"),i=!0)}catch(e){}if(void 0===e&&(e=i?["binary","base64"]:"base64"),!i){if("binary"===e)throw new Error("WebSocket binary sub-protocol requested but not supported");if("object"===u(e)){for(var f=[],l=0;l<e.length;l++)"binary"===e[l]?console.error("Skipping unsupported WebSocket binary sub-protocol"):f.push(e[l]);if(!(f.length>0))throw new Error("Only WebSocket binary sub-protocol was requested and not supported.");e=f}}return e}function M(e,o){var r=e.match(/^([a-z]+):\/\//)[1];o=P(o,r),l?t={}:(t=new WebSocket(e,o),o.indexOf("binary")>=0&&(t.binaryType="arraybuffer")),t.onmessage=W,t.onopen=function(){console.log(">> WebSock.onopen"),t.protocol?(n=t.protocol,console.log("Server chose sub-protocol: "+t.protocol)):(n="base64",console.error("Server select no sub-protocol!: "+t.protocol)),f.open(),console.log('"<< WebSock.onopen')},t.onclose=function(e){console.log(">> WebSock.onclose"),f.close(e),console.log("<< WebSock.onclose")},t.onerror=function(e){console.log(">> WebSock.onerror: "+e),f.error(e),console.log("<< WebSock.onerror")}}function T(){t&&(t.readyState!==WebSocket.OPEN&&t.readyState!==WebSocket.CONNECTING||(console.log("Closing WebSocket connection"),t.close()),t.onmessage=function(e){})}function E(t,o){return l=!0,n=o,e.send=t,e.close=function(){},W}return e.maxBufferedAmount=200,e.get_sQ=d,e.get_rQ=p,e.get_rQi=y,e.set_rQi=b,e.rQlen=h,e.rQpeek8=g,e.rQshift8=m,e.rQunshift8=v,e.rQshift16=S,e.rQshift32=_,e.rQshiftStr=k,e.rQshiftBytes=C,e.rQslice=A,e.rQwait=w,e.flush=x,e.send=O,e.send_string=j,e.on=Q,e.init=P,e.open=M,e.close=T,e.testMode=E,console.log(s),e};var o,r=(o=n(0))&&o.__esModule?o:{default:o};function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,