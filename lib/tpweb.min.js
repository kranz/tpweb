!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("tpweb",[],t):"object"==typeof exports?exports.tpweb=t():e.tpweb=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}var t,n,o;return t=e,(n=[{key:"encode",value:function(e){var t,n,r,o,u,i,f,a="",c=0;for(e=this._utf8Encode(e);c<e.length;)o=(t=e.charCodeAt(c++))>>2,u=(3&t)<<4|(n=e.charCodeAt(c++))>>4,i=(15&n)<<2|(r=e.charCodeAt(c++))>>6,f=63&r,isNaN(n)?i=f=64:isNaN(r)&&(f=64),a=a+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(i)+this._keyStr.charAt(f);return a}},{key:"decode",value:function(e){var t,n,r,o,u,i,f="",a=0;for(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");a<e.length;)t=this._keyStr.indexOf(e.charAt(a++))<<2|(o=this._keyStr.indexOf(e.charAt(a++)))>>4,n=(15&o)<<4|(u=this._keyStr.indexOf(e.charAt(a++)))>>2,r=(3&u)<<6|(i=this._keyStr.indexOf(e.charAt(a++))),f+=String.fromCharCode(t),64!==u&&(f+=String.fromCharCode(n)),64!==i&&(f+=String.fromCharCode(r));return f=this._utf8Decode(f)}},{key:"_utf8Encode",value:function(e){var t="";e=e.replace(/\r\n/g,"\n");for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t+=String.fromCharCode(r):r>127&&r<2048?(t+=String.fromCharCode(r>>6|192),t+=String.fromCharCode(63&r|128)):(t+=String.fromCharCode(r>>12|224),t+=String.fromCharCode(r>>6&63|128),t+=String.fromCharCode(63&r|128))}return t}},{key:"_utf8Decode",value:function(e){for(var t="",n=0,r=0,o=0,u=0;n<e.length;)(r=e.charCodeAt(n))<128?(t+=String.fromCharCode(r),n++):r>191&&r<224?(o=e.charCodeAt(n+1),t+=String.fromCharCode((31&r)<<6|63&o),n+=2):(o=e.charCodeAt(n+1),u=e.charCodeAt(n+2),t+=String.fromCharCode((15&r)<<12|(63&o)<<6|63&u),n+=3);return t}}])&&r(t.prototype,n),o&&r(t,o),e}();t.default=o,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"TpSocket",{enumerable:!0,get:function(){return o.default}});var r,o=(r=n(2))&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=u(n(0)),o=u(n(3));function u(e){return e&&e.__esModule?e:{default:e}}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name="Barra-Tempest"}var t,n,u;return t=e,(n=[{key:"name",get:function(){return this._name}},{key:"encodedName",get:function(){return(new r.default).encode(this._name)}},{key:"saluta",get:function(){return o.default.greetme()}}])&&i(t.prototype,n),u&&i(t,u),e}();t.default=f,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e={},t=null,n="base64",u=[],f=0,a=1e4,c=[],l={message:function(){},open:function(){},close:function(){},error:function(){}},s=!1;function d(){return"ciccamelo! uno a zero!"}function p(){return c}function b(){return u}function y(){return f}function h(e){f=e}function g(){return u.length-f}function m(){return u[f]}function v(){return u[f++]}function S(e){0===f?u.unshift(e):u[f-=1]=e}function _(){return(u[f++]<<8)+u[f++]}function C(){return(u[f++]<<24)+(u[f++]<<16)+(u[f++]<<8)+u[f++]}function k(e){void 0===e&&(e=g());var t=u.slice(f,f+e);return f+=e,String.fromCharCode.apply(null,t)}function A(e){return void 0===e&&(e=g()),f+=e,u.slice(f-e,f)}function w(e,t){return t?u.slice(f+e,f+t):u.slice(f+e)}function x(e,t,n){var r=u.length-f;if(r<t){if(n){if(f<n)throw new Error("rQwait cannot backup "+n+" bytes");f-=n}return!0}return!1}function O(){return 0!==t.bufferedAmount&&o.default.Debug("bufferedAmount: "+t.bufferedAmount),t.bufferedAmount<e.maxBufferedAmount?(c.length>0&&(t.send(function(){if("binary"===n)return new Uint8Array(c).buffer;return r.default.encode(c)}()),c=[]),!0):(o.default.Info("Delaying send, bufferedAmount: "+t.bufferedAmount),!1)}function j(e){return c=c.concat(e),O()}function W(t){e.send(t.split("").map(function(e){return e.charCodeAt(0)}))}function Q(e){try{!function(e){if("binary"===n)for(var t=new Uint8Array(e),o=0;o<t.length;o++)u.push(t[o]);else u=u.concat(r.default.decode(e,0))}(e.data),g()>0?(l.message(),u.length>a&&(u=u.slice(f),f=0)):o.default.Debug("Ignoring empty message")}catch(e){void 0!==e.stack?o.default.Warn("recv_message, caught exception: "+e.stack):void 0!==e.description?o.default.Warn("recv_message, caught exception: "+e.description):o.default.Warn("recv_message, caught exception:"+e),void 0!==e.name?l.error(e.name+": "+e.message):l.error(e)}}function P(e,t){l[e]=t}function M(e,n){var r=!1,a=!1;u=[],f=0,c=[],t=null,"Uint8Array"in window&&"set"in Uint8Array.prototype&&(r=!0);try{r&&("binaryType"in WebSocket.prototype||new WebSocket(n+"://.").binaryType)&&(o.default.Info("Detected binaryType support in WebSockets"),a=!0)}catch(e){}if(void 0===e&&(e=a?["binary","base64"]:"base64"),!a){if("binary"===e)throw new Error("WebSocket binary sub-protocol requested but not supported");if("object"===i(e)){for(var l=[],s=0;s<e.length;s++)"binary"===e[s]?o.default.Error("Skipping unsupported WebSocket binary sub-protocol"):l.push(e[s]);if(!(l.length>0))throw new Error("Only WebSocket binary sub-protocol was requested and not supported.");e=l}}return e}function D(e,r){var u=e.match(/^([a-z]+):\/\//)[1];r=M(r,u),s?t={}:(t=new WebSocket(e,r),r.indexOf("binary")>=0&&(t.binaryType="arraybuffer")),t.onmessage=Q,t.onopen=function(){o.default.Debug(">> WebSock.onopen"),t.protocol?(n=t.protocol,o.default.Info("Server chose sub-protocol: "+t.protocol)):(n="base64",o.default.Error("Server select no sub-protocol!: "+t.protocol)),l.open(),o.default.Debug('"<< WebSock.onopen')},t.onclose=function(e){o.default.Debug(">> WebSock.onclose"),l.close(e),o.default.Debug("<< WebSock.onclose")},t.onerror=function(e){o.default.Debug(">> WebSock.onerror: "+e),l.error(e),o.default.Debug("<< WebSock.onerror")}}function E(){t&&(t.readyState!==WebSocket.OPEN&&t.readyState!==WebSocket.CONNECTING||(o.default.Info("Closing WebSocket connection"),t.close()),t.onmessage=function(e){})}function T(t,r){return s=!0,n=r,e.send=t,e.close=function(){},Q}return e.maxBufferedAmount=200,e.get_sQ=p,e.get_rQ=b,e.get_rQi=y,e.set_rQi=h,e.rQlen=g,e.rQpeek8=m,e.rQshift8=v,e.rQunshift8=S,e.rQshift16=_,e.rQshift32=C,e.rQshiftStr=k,e.rQshiftBytes=A,e.rQslice=w,e.rQwait=x,e.flush=O,e.send=j,e.send_string=W,e.on=P,e.init=M,e.open=D,e.close=E,e.testMode=T,console.log(d),e};var r=u(n(0)),o=u(n(4));function u(e){return e&&e.__esModule?e:{default:e}}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)},e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,